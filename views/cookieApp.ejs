<script>

    const cookie = document.querySelector('#cookie')
    const cookieAmountDiv = document.querySelector('.cookieAmount')
    const cookiePerSecondDiv = document.querySelector('.perSecond')
    const clickIndicator = document.querySelector('.clickIndicator')

    const upgradeContainer = document.querySelector('.upgrades')
    const modifierContainer = document.querySelector('.allModifiers')

    let totalCookies = 0
    let cookieAmount = 0
    let perClick = 1
    let perClickMod = 1
    let perSecond = 0

	//Upgrade function model for creating upgrades
    function Upgrade(name, cost, amount, cookiesAdded) {
        this.name = name
        this.cost = cost
        this.amount = amount
        this.cookiesAdded = cookiesAdded
    }

    let clicker = new Upgrade('clicker', 100, 0, 1)
    let grandma = new Upgrade('grandma', 4000, 0, 20)
    let cave = new Upgrade('cave', 13000, 0, 100)
    let factory = new Upgrade('factory', 70000, 0, 400)
    let temple = new Upgrade('temple', 300000, 0, 1000)

	//Modifier objects (literals)
	let dblClick1 = {
		name: 'dblClick1',
		cost: 10000,
		icon: 'Cl1',
		func: function() {
			perClickMod = 2
            perClick *= 2
		},
		text: 'Doubles the amount of cookies gained per-click',
		used: 'false'
	}
	let dblClick2 = {
		name: 'dblClick2',
		cost: 100000,
		icon: 'Cl2',
		func: function() {
			perClickMod *= 2
            perClick *= 2
		},
		text: 'Doubles the amount of cookies gained per-click',
		used: 'false'
	}
	let dblGrandma1 = {
		name: 'dblGrandma1',
		cost: 20000,
		icon: 'G1',
		func: function() {
			grandma.cookiesAdded *= 2
		},
		text: 'Doubles the amount of cookies each grandma produces',
		used: 'false'
	}
	let dblGrandma2 = {
		name: 'dblGrandma2',
		cost: 200000,
		icon: 'G2',
		func: function() {
			grandma.cookiesAdded *= 2
		},
		text: 'Doubles the amount of cookies each grandma produces',
		used: 'false'
	}
	let dblCave1 = {
		name: 'dblCave1',
		cost: 50000,
		icon: 'Ca1',
		func: function() {
			cave.cookiesAdded *= 2
		},
		text: 'Doubles the amount of cookies each cave produces',
		used: 'false'
	}
	let dblCave2 = {
		name: 'dblCave2',
		cost: 500000,
		icon: 'Ca2',
		func: function() {
			cave.cookiesAdded *= 2
		},
		text: 'Doubles the amount of cookies each cave produces',
		used: 'false'
	}
	let dblFactory1 = {
		name: 'dblFactory1',
		cost: 300000,
		icon: 'F1',
		func: function() {
			factory.cookiesAdded *= 2
		},
		text: 'Doubles the amount of cookies each factory produces',
		used: 'false'
	}
	let dblFactory2 = {
		name: 'dblFactory2',
		cost: 3000000,
		icon: 'F2',
		func: function() {
			factory.cookiesAdded *= 2
		},
		text: 'Doubles the amount of cookies each factory produces',
		used: 'false'
	}
	let dblTemple1 = {
		name: 'dblTemple1',
		cost: 1500000,
		icon: 'T1',
		func: function() {
			temple.cookiesAdded *= 2
		},
		text: 'Doubles the amount of cookies each cave produces',
		used: 'false'
	}
	let dblTemple2 = {
		name: 'dblTemple2',
		cost: 15000000,
		icon: 'T2',
		func: function() {
			temple.cookiesAdded *= 2
		},
		text: 'Doubles the amount of cookies each cave produces',
		used: 'false'
	}
    
	
	//Updates all changing DOM elements: cookies, CPS, upgrade info. (unless updated elsewhere)
	function updateDOM() {
        cookieAmountDiv.innerHTML = `${cookieAmount} cookies`
        perSecond = ((clicker.cookiesAdded * clicker.amount) + (grandma.cookiesAdded * grandma.amount) + (cave.cookiesAdded * cave.amount) + (factory.cookiesAdded * factory.amount) + (temple.cookiesAdded * temple.amount))
        cookiePerSecondDiv.innerHTML = `${perSecond} cookies per second`
        upgrades.forEach((e) => {
            document.querySelector(`.${e.name}Amount`).innerHTML = e.amount
            document.querySelector(`#${e.name}Cost`).innerHTML = `${e.cost} cookies`
			document.querySelector(`.${e.name}Tip`).innerHTML = `Generating ${e.cookiesAdded * e.amount} cookies per second`
        })
    }


	//Arrays that hold each upgrade/modifier object
    let upgrades = [clicker, grandma, cave, factory, temple]
	let modifiers = [dblClick1, dblGrandma1, dblCave1, dblFactory1, dblClick2, dblTemple1, dblCave2, dblFactory2, dblTemple2]


	//Gets save data variables from LocalStorage if data exists; otherwise the varables are pre-initiated
	if (localStorage.getItem('cookieAmount')) {
		clicker = JSON.parse(localStorage.getItem('clicker'))
		grandma = JSON.parse(localStorage.getItem('grandma'))
		cave = JSON.parse(localStorage.getItem('cave'))
		factory = JSON.parse(localStorage.getItem('factory'))
		temple = JSON.parse(localStorage.getItem('temple'))

		dblClick1 = JSON.parse(localStorage.getItem('dblClick1'))
		dblClick2 = JSON.parse(localStorage.getItem('dblClick2'))
		dblGrandma1 = JSON.parse(localStorage.getItem('dblGrandma1'))
		dblCave1 = JSON.parse(localStorage.getItem('dblCave1'))
		dblFactory1 = JSON.parse(localStorage.getItem('dblFactory1'))
		dblTemple1 = JSON.parse(localStorage.getItem('dblTemple1'))

		totalCookies = parseInt(localStorage.getItem('totalCookies'))
		cookieAmount = parseInt(localStorage.getItem('cookieAmount'))
		perClick = parseInt(localStorage.getItem('perClick'))
		perClickMod = parseInt(localStorage.getItem('perClickMod'))
		perSecond = parseInt(localStorage.getItem('perSecond'))

		upgrades = [clicker, grandma, cave, factory, temple]

		for (let i = 0; i < localStorage.getItem('modUsed').split(',').length; i++) {
			modifiers[i].used = localStorage.getItem('modUsed').split(',')[i]
		}

	}
    
	//Puts all current variables into LocalStorage to be read on reload
	document.querySelector('.saveGame').addEventListener('click', () => {
		localStorage.setItem('clicker', JSON.stringify(clicker))
		localStorage.setItem('grandma', JSON.stringify(grandma))
		localStorage.setItem('cave', JSON.stringify(cave))
		localStorage.setItem('factory', JSON.stringify(factory))
		localStorage.setItem('temple', JSON.stringify(temple))

		localStorage.setItem('dblClick1', JSON.stringify(dblClick1))
		localStorage.setItem('dblClick2', JSON.stringify(dblClick2))
		localStorage.setItem('dblGrandma1', JSON.stringify(dblGrandma1))
		localStorage.setItem('dblCave1', JSON.stringify(dblCave1))
		localStorage.setItem('dblFactory1', JSON.stringify(dblFactory1))
		localStorage.setItem('dblTemple1', JSON.stringify(dblTemple1))

		localStorage.setItem('totalCookies', totalCookies.toString())
		localStorage.setItem('cookieAmount', Math.floor(cookieAmount).toString())
		localStorage.setItem('perClick', perClick.toString())
		localStorage.setItem('perClickMod', perClickMod.toString())
		localStorage.setItem('perSecond', perSecond.toString())

		let modUsed = []
		modifiers.forEach((mod) => {
			modUsed.push(mod.used)
		})
		localStorage.setItem('modUsed', modUsed)

		alert('game saved')

	})
	document.querySelector('.clearSave').addEventListener('click', () => {
		localStorage.clear()
		alert('save cleared!')
	})

	//Sets DOM elements (cookie costs/upgrade amounts/etc) after LocalStorage is checked
	window.onload = function() {
        updateDOM()
    }


	//Generates HTML elements for all game upgrades
	//Adds all event listeners for upgrades
    upgrades.forEach((upgradeInst) => {
        const div = document.createElement('div')
        div.className = 'upgradeDiv'
        const upAmount = document.createElement('div')
        upAmount.className = `${upgradeInst.name}Amount amountLabel`
        upAmount.innerHTML = upgradeInst.amount
        div.appendChild(upAmount)

        const upButton = document.createElement('div')
        upButton.setAttribute('id', upgradeInst.name)
        upButton.className = 'button'
        upButton.innerHTML = upgradeInst.name[0].toUpperCase() + upgradeInst.name.slice(1)
        div.appendChild(upButton)

        const upCost = document.createElement('label')
        upCost.setAttribute('id', `${upgradeInst.name}Cost`)
        upCost.setAttribute('for', upgradeInst.name)
        upCost.innerHTML = `${upgradeInst.cost} cookies`
        div.appendChild(upCost)

        const upTooltip = document.createElement('tooltip')
        upTooltip.className = `toolTip ${upgradeInst.name}Tip`
        upTooltip.innerHTML = `${upgradeInst.cookiesAdded * upgradeInst.amount} cookies per second`
        div.appendChild(upTooltip)

		div.addEventListener('click', () => {
			if (cookieAmount >= upgradeInst.cost) {
				cookieAmount -= upgradeInst.cost
				upgradeInst.cost = Math.floor(upgradeInst.cost * 1.06)
				upgradeInst.amount++
				perSecond += upgradeInst.cookiesAdded
				perClick += perClickMod
				updateDOM()
			}
		})

        upgradeContainer.appendChild(div)
    })

	//Generates HTML elements for all game modifiers
	//Adds all event listeners for modifiers
    modifiers.forEach((mod) => {
		if (mod.used === 'false') {
			const div = document.createElement('div')
			div.setAttribute('id', mod.name)
			div.className = `modifierDiv ${mod.name} needs-mouse-event`
			div.setAttribute('data-info-text', mod.text)
			div.setAttribute('data-cost', mod.cost)
			div.innerHTML = `${mod.icon}`

			div.addEventListener('mouseover', (e) => {
				document.querySelector('.infoBox').innerHTML = `${e.currentTarget.getAttribute('data-info-text')}<br>Cost: ${e.currentTarget.getAttribute('data-cost')} cookies`
			})
			div.addEventListener('mouseout', () => {
				document.querySelector('.infoBox').innerHTML = ''
			})
			div.addEventListener('click', () => {
				if (cookieAmount >= mod.cost) {
					cookieAmount -= mod.cost
					mod.used = true
					mod.func()
					div.remove()
					console.log()
					let x = document.querySelectorAll('.modifierDiv')[document.querySelectorAll('.modifierDiv').length - 1]
					x.style.borderRight = 'solid 1px rgb(60, 60, 60)'
					document.querySelector('.infoBox').innerHTML = ''
					updateDOM()
				}
			})

			modifierContainer.appendChild(div)
		}
    })


	//Listens for a click registering on the cookie
    cookie.addEventListener('click', (e) => {
        cookieAmount += perClick
        clickIndicator.className = 'clickIndicatorActive'
        setTimeout(() => {
            clickIndicator.className = 'clickIndicator'
        }, 100)
        clickIndicator.innerHTML = `+${perClick} cookies`
        clickIndicator.style.top = `${e.clientY - (clickIndicator.offsetHeight / 0.5 + (Math.random() * 10))}px`
        clickIndicator.style.left = `${e.clientX - (clickIndicator.offsetWidth / 2.1 + (Math.random() * 10))}px `
        cookieAmountDiv.innerHTML = `${Math.floor(cookieAmount)} cookies`
    })

	//Sets repeating event to update cookie amount
    setInterval(() => {
        perSecond = ((clicker.cookiesAdded * clicker.amount) + (grandma.cookiesAdded * grandma.amount) + (cave.cookiesAdded * cave.amount) + (factory.cookiesAdded * factory.amount) + (temple.cookiesAdded * temple.amount))
        cookieAmount += perSecond / 100
        totalCookies += perSecond / 100
        cookieAmountDiv.innerHTML = `${Math.floor(cookieAmount)} cookies`
    }, 10)
    
	//Sets repeating event to check if upgrade/modifier is purchasable; greys out/in as needed
	setInterval(() => {
        upgrades.forEach((e) => {
            if (e.cost > cookieAmount) {
                document.querySelector(`#${e.name}`).parentElement.style.opacity = 0.3
                document.querySelector(`#${e.name}`).parentElement.className = 'upgradeDiv disabled'
            } else {
                document.querySelector(`#${e.name}`).parentElement.style.opacity = 1
                document.querySelector(`#${e.name}`).parentElement.className = 'upgradeDiv'
            }
        })
        modifiers.forEach((e) => {
			if (e.used === 'false') {
				if (e.cost > cookieAmount) {
					document.querySelector(`.${e.name}`).style.opacity = 0.3
					document.querySelector(`.${e.name}`).className = `modifierDiv ${e.name} disabled`
				} else {
					document.querySelector(`.${e.name}`).style.opacity = 1
					document.querySelector(`.${e.name}`).className = `modifierDiv ${e.name}`
				}
			}
        })
    }, 200)


	//Can be used to add cookies on demand
    function getCookies(amt) {
        cookieAmount += amt
		totalCookies += amt
    }

</script>
